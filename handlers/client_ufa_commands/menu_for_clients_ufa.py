from aiogram.types import InlineKeyboardMarkup
from aiogram import types
from aiogram.dispatcher import FSMContext
from keyboard import client_kb
from handlers import client
from create_bot import bot
from handlers.general_commands import start_commands
from gizmo import connect_gizmo
from data_base import sqlite_db
from generate_text import generate_qr_code


# –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–æ–≤ —Ç—Ü–±

async def get_menu_for_client_ufa(callback: types.CallbackQuery, state: FSMContext):
    try:
        answer_kb = InlineKeyboardMarkup()
        answer_kb = await client_kb.answer_choise_menu_ufa(answer_kb)
        await bot.send_message(callback.from_user.id,
                               '–í—ã–±–∏—Ä–∞–π:',
                               reply_markup=answer_kb)
        await client.FSMClient.menu_ufa.set()
        await callback.answer('')
    except:
        await callback.answer('–û—à–∏–±–∫–∞')
        print('–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ get_menu_for_client')


# —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–≤

async def get_status_pc_info(callback: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == "FSMClient:menu_ufa":
        status_pc_str = await connect_gizmo.get_all_status_pc("ufa")
        await bot.send_message(callback.from_user.id, status_pc_str)
        await state.finish()
        await callback.answer('')
        await start_commands.command_start_if_back(callback.message.chat, state)
    else:
        print()  # dema


# –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å

async def create_reservation_pc(callback: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == "FSMClient:menu_ufa":
        await client.FSMClient.reservation_begin_ufa.set()
        # status_pc_str = await connect_gizmo.create_reservation_pc("ufa")
        answer_kb = InlineKeyboardMarkup()
        answer_kb = await client_kb.answer_choise_pc_for_reservation_ufa(answer_kb)
        await bot.send_message(callback.from_user.id, "–ö–∞–∫–æ–π –ø–∫ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=answer_kb)
        # await state.finish()
        await callback.answer('')
        # await command_start_if_back(callback.message.chat, state)
    else:
        print()  # dema


async def reservation_pc_choise_pc(callback: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == "FSMClient:reservation_begin_ufa":
        await client.FSMClient.reservation_choise_pc_ufa.set()
        # status_pc_str = await connect_gizmo.create_reservation_pc("ufa")
        answer_kb = InlineKeyboardMarkup()
        answer_kb = await client_kb.answer_cansel(answer_kb)
        await bot.send_message(callback.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É, –ø—Ä–∏–º–µ—Ä: 2022-10-23T04:25:23.507Z",
                               reply_markup=answer_kb)
        # await state.finish()
        await callback.answer('')
        # await command_start_if_back(callback.message.chat, state)
    else:
        print()  # dema


async def reservation_pc_choise_data(callback: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == "FSMClient:reservation_choise_pc_ufa":
        await client.FSMClient.reservation_choise_data_ufa.set()
        # status_pc_str = await connect_gizmo.create_reservation_pc("ufa")
        answer_kb = InlineKeyboardMarkup()
        answer_kb = await client_kb.answer_cansel(answer_kb)
        await bot.send_message(callback.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä:",
                               reply_markup=answer_kb)
        # await state.finish()
        await callback.answer('')
        # await command_start_if_back(callback.message.chat, state)
    else:
        print()  # dema


async def reservation_pc_write_number(callback: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == "FSMClient:reservation_choise_data_ufa":
        await client.FSMClient.reservation_write_number_ufa.set()
        # status_pc_str = await connect_gizmo.create_reservation_pc("ufa")
        answer_kb = InlineKeyboardMarkup()
        answer_kb = await client_kb.answer_cansel(answer_kb)
        await bot.send_message(callback.from_user.id, "–ó–¥–µ—Å—å –º–æ–∂–µ—Ç–µ –≤–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é, –µ—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω—É–∂–µ–Ω, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
                               reply_markup=answer_kb)
        # await state.finish()
        await callback.answer('')
        # await command_start_if_back(callback.message.chat, state)
    else:
        print()  # dema


async def reservation_pc_write_note(callback: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == "FSMClient:reservation_write_number_ufa":
        await client.FSMClient.reservation_choise_data_ufa.set()
        # status_pc_str = await connect_gizmo.create_reservation_pc("ufa")
        answer_kb = InlineKeyboardMarkup()
        answer_kb = await client_kb.answer_cansel(answer_kb)
        await bot.send_message(callback.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä:",
                               reply_markup=answer_kb)
        # await state.finish()
        await callback.answer('')
        # await command_start_if_back(callback.message.chat, state)
    else:
        print()  # dema


async def reservation_pc_write_duration(callback: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == "FSMClient:reservation_write_number_ufa":
        await client.FSMClient.reservation_choise_data_ufa.set()
        # status_pc_str = await connect_gizmo.create_reservation_pc("ufa")
        answer_kb = InlineKeyboardMarkup()
        answer_kb = await client_kb.answer_cansel(answer_kb)
        await bot.send_message(callback.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä:",
                               reply_markup=answer_kb)
        # await state.finish()
        await callback.answer('')
        # await command_start_if_back(callback.message.chat, state)
    else:
        print()  # dema


# —Ä–∞—Å—Å—ã–ª–∫–∞

async def writing_clients(password: str):
    clients_for_mail = await sqlite_db.sql_get_all_users()
    qr_code_bytes = await generate_qr_code.create_qr_code(password)
    try:
        text_for_clients = "üì™ –ü—Ä–∏–≤–µ—Ç! –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å 1 —á–∞—Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ? –ë–µ—Ä–∏—Ç–µ QR –∫–æ–¥!\n–ü–æ–¥–æ–π–¥–∏—Ç–µ –∫ —Å—Ç–æ–π–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏. –ö–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è, –ª–∏—à—å, –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–∫–∞–∑–∞–≤—à–µ–≥–æ."
        for i in clients_for_mail:
            await bot.send_photo(i[0], photo=qr_code_bytes, caption=text_for_clients)
    except:
        print("error ", writing_clients)

